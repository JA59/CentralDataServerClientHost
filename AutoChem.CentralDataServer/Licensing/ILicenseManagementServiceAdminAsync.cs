//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
#region Header

/*
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2012 by Mettler Toledo AutoChemAutoChem.  All rights reserved.
**
**ENDHEADER:
*/

#endregion

using System;
using System.ServiceModel;
using System.Threading.Tasks;

namespace AutoChem.Core.CentralDataServer.Licensing
{
    /// <summary>
    /// Interface for License Management
    /// </summary>
    [ServiceContract(Name = "ILicenseManagementServiceAdmin", Namespace = ServicesHelper.ServiceNameSpace)]
    public interface ILicenseManagementServiceAdminAsync
    {
        /// <summary>
        /// Get the License Settings
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetLicenseSettings(System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetLicenseSettings on the server that corresponds to the result.
        ///</summary>
        LicenseSettings EndGetLicenseSettings(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetLicenseSettings on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<LicenseSettings> GetLicenseSettingsAsync();
#endif

        ///<summary>
        /// Calls GetLicenseSettings on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        LicenseSettings GetLicenseSettings();
        
        /// <summary>
        /// Uploads a site license file
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginUploadSiteLicenseFile(byte[] templateData, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling UploadSiteLicenseFile on the server that corresponds to the result.
        ///</summary>
        LicenseSettings EndUploadSiteLicenseFile(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling UploadSiteLicenseFile on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<LicenseSettings> UploadSiteLicenseFileAsync(byte[] templateData);
#endif

        ///<summary>
        /// Calls UploadSiteLicenseFile on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        LicenseSettings UploadSiteLicenseFile(byte[] templateData);
    }
}
