//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
#region Header

/*
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2012 by Mettler Toledo AutoChemAutoChem.  All rights reserved.
**
**ENDHEADER:
*/

#endregion

using System;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading.Tasks;

namespace AutoChem.Core.CentralDataServer.Licensing
{
    /// <summary>
    /// A client to the License management service.
    /// </summary>
    public class LicenseManagementAdminClientAsync : ClientBase<ILicenseManagementServiceAdminAsync>, ILicenseManagementServiceAdminAsync
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="binding">binding (passed to base class)</param>
        /// <param name="remoteAddress">endpoint address (passed to base class)</param>
        public LicenseManagementAdminClientAsync(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        /// <summary>
        /// Get license settings
        /// </summary>
        /// <returns></returns>
        public IAsyncResult BeginGetLicenseSettings(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetLicenseSettings(callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetLicenseSettings on the server that corresponds to the result.
        ///</summary>
        public LicenseSettings EndGetLicenseSettings(System.IAsyncResult result)
        {
            return base.Channel.EndGetLicenseSettings(result);
        }

        ///<summary>
        /// Returns the result of calling GetLicenseSettings on the server as an async Task.
        ///</summary>
        public Task<LicenseSettings> GetLicenseSettingsAsync()
        {
            var taskSource = new TaskCompletionSource<LicenseSettings>();
            BeginGetLicenseSettings(asyncResult =>
            {
                try
                {
                    var result = EndGetLicenseSettings(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls GetLicenseSettings on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public LicenseSettings GetLicenseSettings()
        {
            IAsyncResult result = BeginGetLicenseSettings(null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetLicenseSettings(result);
        }

        /// <summary>
        /// Upload Site License File
        /// </summary>
        public IAsyncResult BeginUploadSiteLicenseFile(byte[] templateData, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginUploadSiteLicenseFile(templateData, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling UploadSiteLicenseFile on the server that corresponds to the result.
        ///</summary>
        public LicenseSettings EndUploadSiteLicenseFile(System.IAsyncResult result)
        {
            return base.Channel.EndUploadSiteLicenseFile(result);
        }

        ///<summary>
        /// Returns the result of calling UploadSiteLicenseFile on the server as an async Task.
        ///</summary>
        public Task<LicenseSettings> UploadSiteLicenseFileAsync(byte[] templateData)
        {
            var taskSource = new TaskCompletionSource<LicenseSettings>();
            BeginUploadSiteLicenseFile(templateData, asyncResult =>
            {
                try
                {
                    var result = EndUploadSiteLicenseFile(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls UploadSiteLicenseFile on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public LicenseSettings UploadSiteLicenseFile(byte[] templateData)
        {
            IAsyncResult result = BeginUploadSiteLicenseFile(templateData, null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndUploadSiteLicenseFile(result);
        }
    }
}