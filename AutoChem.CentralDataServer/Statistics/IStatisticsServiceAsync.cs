//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.10.0.0
// 
/*
**
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2012 by Mettler Toledo AutoChem.  All rights reserved.
**
**ENDHEADER:
**/
using System;
using System.Collections.Generic;
using System.Net;
using System.ServiceModel;
using System.Windows;
using System.Threading.Tasks;

namespace AutoChem.Core.CentralDataServer.Statistics
{
    /// <summary>
    /// Service for obtaining the statistics information(instrument utilization, experiment statistics etc..)
    /// </summary>
    [ServiceContract(Name = "IStatisticsService", Namespace = ServicesHelper.ServiceNameSpace)]
    public interface IStatisticsServiceAsync
    {
        ///<summary>
        /// Calls GetInstrumentInfos on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetInstrumentStatsInfos(DateTime startTime, DateTime endTime, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetInstrumentStatsInfos on the server that corresponds to the result.
        ///</summary>
        IEnumerable<InstrumentStatsInfo> EndGetInstrumentStatsInfos(System.IAsyncResult result);

        ///<summary>
        /// Calls GetInstrumentStatsInfos on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        IEnumerable<InstrumentStatsInfo> GetInstrumentStatsInfos(DateTime startTime, DateTime endTime);
        ///<summary>
        /// Calls GetInstrumentInfos on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetInstrumentStatsInfosWithinInterval(IntervalEnum interval, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetInstrumentStatsInfosWithinInterval on the server that corresponds to the result.
        ///</summary>
        IEnumerable<InstrumentStatsInfo> EndGetInstrumentStatsInfosWithinInterval(System.IAsyncResult result);

        ///<summary>
        /// Calls GetInstrumentStatsInfosWithinInterval on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        IEnumerable<InstrumentStatsInfo> GetInstrumentStatsInfosWithinInterval(IntervalEnum interval);
        ///<summary>
        /// Calls GetInstrumentInfos on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetiCInstrumentStatsInfosWithinInterval(IntervalEnum interval, string iCProductName, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetiCInstrumentStatsInfosWithinInterval on the server that corresponds to the result.
        ///</summary>
        IEnumerable<InstrumentStatsInfo> EndGetiCInstrumentStatsInfosWithinInterval(System.IAsyncResult result);

        ///<summary>
        /// Calls GetiCInstrumentStatsInfosWithinInterval on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        IEnumerable<InstrumentStatsInfo> GetiCInstrumentStatsInfosWithinInterval(IntervalEnum interval, string iCProductName);
        ///<summary>
        /// Calls GetExperimentStatsInfos on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetExperimentStatsInfos(DateTime startTime, DateTime endTime, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetExperimentStatsInfos on the server that corresponds to the result.
        ///</summary>
        IEnumerable<ExperimnetStatsInfo> EndGetExperimentStatsInfos(System.IAsyncResult result);

        ///<summary>
        /// Calls GetExperimentStatsInfos on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        IEnumerable<ExperimnetStatsInfo> GetExperimentStatsInfos(DateTime startTime, DateTime endTime);
        ///<summary>
        /// Calls GetExperimentStatsInfos on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetExperimentStatsInfosWithinInterval(IntervalEnum interval, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetExperimentStatsInfosWithinInterval on the server that corresponds to the result.
        ///</summary>
        IEnumerable<ExperimnetStatsInfo> EndGetExperimentStatsInfosWithinInterval(System.IAsyncResult result);

        ///<summary>
        /// Calls GetExperimentStatsInfosWithinInterval on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        IEnumerable<ExperimnetStatsInfo> GetExperimentStatsInfosWithinInterval(IntervalEnum interval);   
        /// <summary>
        /// Gets all systems stats info
        /// </summary>
        /// <returns></returns>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetAllSystemsStatsInfo(System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetAllSystemsStatsInfo on the server that corresponds to the result.
        ///</summary>
        IEnumerable<InstrumentAppStatsInfo> EndGetAllSystemsStatsInfo(System.IAsyncResult result);

        ///<summary>
        /// Calls GetAllSystemsStatsInfo on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        IEnumerable<InstrumentAppStatsInfo> GetAllSystemsStatsInfo();
        /// <summary>
        /// Gets latest exp infos
        /// </summary>
        /// <returns></returns>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetLatestExperementsInfos(System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetLatestExperementsInfos on the server that corresponds to the result.
        ///</summary>
        IEnumerable<LatestExpInfo> EndGetLatestExperementsInfos(System.IAsyncResult result);

        ///<summary>
        /// Calls GetLatestExperementsInfos on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        IEnumerable<LatestExpInfo> GetLatestExperementsInfos();
        /// <summary>
        /// Get the info about the disk space
        /// </summary>
        /// <returns></returns>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetDiskSpaceInfo(System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetDiskSpaceInfo on the server that corresponds to the result.
        ///</summary>
        DiskSpaceInfo EndGetDiskSpaceInfo(System.IAsyncResult result);

        ///<summary>
        /// Calls GetDiskSpaceInfo on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        DiskSpaceInfo GetDiskSpaceInfo();
    }

}
