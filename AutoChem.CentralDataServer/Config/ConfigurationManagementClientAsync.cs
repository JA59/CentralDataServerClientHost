//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
/*
**
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2011 by Mettler Toledo AutoChem.  All rights reserved.
**
**ENDHEADER:
**/

using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using System.Threading.Tasks;

namespace AutoChem.Core.CentralDataServer.Config
{
    /// <summary>
    /// A client to the Configuration management service.
    /// </summary>
    public class ConfigurationManagementClientAsync : ClientBase<IConfigurationManagementServiceAsync>, IConfigurationManagementServiceAsync
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="binding">binding (passed to base class)</param>
        /// <param name="remoteAddress">endpoint address (passed to base class)</param>
        public ConfigurationManagementClientAsync(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        /// <summary>
        /// Gets the configuration settings for the central data server relevant to an experiment provider such as iControl or ic IR.
        /// </summary>
        public IAsyncResult BeginGetExperimentProviderSettings(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetExperimentProviderSettings(callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetExperimentProviderSettings on the server that corresponds to the result.
        ///</summary>
        public ExperimentProviderSettings EndGetExperimentProviderSettings(System.IAsyncResult result)
        {
            return base.Channel.EndGetExperimentProviderSettings(result);
        }

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetExperimentProviderSettings on the server as an async Task.
        ///</summary>
        public Task<ExperimentProviderSettings> GetExperimentProviderSettingsAsync()
        {
            return base.Channel.GetExperimentProviderSettingsAsync();
        }
#else
        ///<summary>
        /// Returns the result of calling GetExperimentProviderSettings on the server as an async Task.
        ///</summary>
        public Task<ExperimentProviderSettings> GetExperimentProviderSettingsAsync()
        {
            var taskSource = new TaskCompletionSource<ExperimentProviderSettings>();
            BeginGetExperimentProviderSettings(asyncResult =>
            {
                try
                {
                    var result = EndGetExperimentProviderSettings(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }
#endif

        ///<summary>
        /// Calls GetExperimentProviderSettings on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public ExperimentProviderSettings GetExperimentProviderSettings()
        {
            IAsyncResult result = BeginGetExperimentProviderSettings(null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetExperimentProviderSettings(result);
        }
        
        /// <summary>
        /// Gets the configuration settings for the central data server relevant to an experiment provider such as iControl or ic IR.
        /// </summary>
        public IAsyncResult BeginGetPartialConfigurationSettings(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetPartialConfigurationSettings(callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetPartialConfigurationSettings on the server that corresponds to the result.
        ///</summary>
        public ConfigurationSettings EndGetPartialConfigurationSettings(System.IAsyncResult result)
        {
            return base.Channel.EndGetPartialConfigurationSettings(result);
        }

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetPartialConfigurationSettings on the server as an async Task.
        ///</summary>
        public Task<ConfigurationSettings> GetPartialConfigurationSettingsAsync()
        {
            return base.Channel.GetPartialConfigurationSettingsAsync();
        }
#else
        ///<summary>
        /// Returns the result of calling GetPartialConfigurationSettings on the server as an async Task.
        ///</summary>
        public Task<ConfigurationSettings> GetPartialConfigurationSettingsAsync()
        {
            var taskSource = new TaskCompletionSource<ConfigurationSettings>();
            BeginGetPartialConfigurationSettings(asyncResult =>
            {
                try
                {
                    var result = EndGetPartialConfigurationSettings(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }
#endif

        ///<summary>
        /// Calls GetPartialConfigurationSettings on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public ConfigurationSettings GetPartialConfigurationSettings()
        {
            IAsyncResult result = BeginGetPartialConfigurationSettings(null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetPartialConfigurationSettings(result);
        }

    }
}
