//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.Text;
using System.Threading.Tasks;

namespace AutoChem.Core.CentralDataServer.Config
{
    /// <summary>
    /// Defines the interface for the configuration management service.
    /// </summary>
    [ServiceContract(Name = "IConfigurationManagementServiceAdmin", Namespace = ServicesHelper.ServiceNameSpace)]
    public interface IConfigurationManagementServiceAdminAsync
    {
        /// <summary>
        /// Gets the configuration settings for the central data server.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetConfigurationSettings(System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetConfigurationSettings on the server that corresponds to the result.
        ///</summary>
        ConfigurationSettings EndGetConfigurationSettings(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetConfigurationSettings on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<ConfigurationSettings> GetConfigurationSettingsAsync();
#endif

        ///<summary>
        /// Calls GetConfigurationSettings on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        ConfigurationSettings GetConfigurationSettings();

        /// <summary>
        /// Sets the configuration settings for the central data server.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginSetConfigurationSettings(ConfigurationSettings settings, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling SetConfigurationSettings on the server that corresponds to the result.
        ///</summary>
        void EndSetConfigurationSettings(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling SetConfigurationSettings on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task SetConfigurationSettingsAsync(ConfigurationSettings settings);
#endif

        ///<summary>
        /// Calls SetConfigurationSettings on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        void SetConfigurationSettings(ConfigurationSettings settings);

        /// <summary>
        /// Updates the word template with the specified template.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginUploadWordTemplate(string fileName, byte[] templateData, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling UploadWordTemplate on the server that corresponds to the result.
        ///</summary>
        void EndUploadWordTemplate(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling UploadWordTemplate on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task UploadWordTemplateAsync(string fileName, byte[] templateData);
#endif

        ///<summary>
        /// Calls UploadWordTemplate on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        void UploadWordTemplate(string fileName, byte[] templateData);

        /// <summary>
        /// Updates the report template used for creating reports for exeriments downloaded from Rxe instruments
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginUploadRxeInstrumentReportTemplate(string fileName, byte[] templateData, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling UploadRxeInstrumentReportTemplate on the server that corresponds to the result.
        ///</summary>
        void EndUploadRxeInstrumentReportTemplate(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling UploadRxeInstrumentReportTemplate on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task UploadRxeInstrumentReportTemplateAsync(string fileName, byte[] templateData);
#endif

        ///<summary>
        /// Calls UploadRxeInstrumentReportTemplate on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        void UploadRxeInstrumentReportTemplate(string fileName, byte[] templateData);

        /// <summary>
        /// Updates the report template used as the default in iControl when iControl is configured to use the central data server.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginUploadDefaultiControlReportTemplate(string fileName, byte[] templateData, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling UploadDefaultiControlReportTemplate on the server that corresponds to the result.
        ///</summary>
        void EndUploadDefaultiControlReportTemplate(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling UploadDefaultiControlReportTemplate on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task UploadDefaultiControlReportTemplateAsync(string fileName, byte[] templateData);
#endif

        ///<summary>
        /// Calls UploadDefaultiControlReportTemplate on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        void UploadDefaultiControlReportTemplate(string fileName, byte[] templateData);

        /// <summary>
        /// Convert a local folder path to a UNC path
        /// </summary>
        /// <returns>UNC path, or String.Empty if there is not UNC name for the path</returns>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginConvertLocalFolderPathToUNCPath(string localfolderPath, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling ConvertLocalFolderPathToUNCPath on the server that corresponds to the result.
        ///</summary>
        string EndConvertLocalFolderPathToUNCPath(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling ConvertLocalFolderPathToUNCPath on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<string> ConvertLocalFolderPathToUNCPathAsync(string localfolderPath);
#endif

        ///<summary>
        /// Calls ConvertLocalFolderPathToUNCPath on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        string ConvertLocalFolderPathToUNCPath(string localfolderPath);

        /// <summary>
        /// Validates that the server can access the specified folder and that it has permission to write to the folder.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginValidateCanWriteToFolder(string folderPath, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling ValidateCanWriteToFolder on the server that corresponds to the result.
        ///</summary>
        IEnumerable<string> EndValidateCanWriteToFolder(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling ValidateCanWriteToFolder on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<IEnumerable<string>> ValidateCanWriteToFolderAsync(string folderPath);
#endif

        ///<summary>
        /// Calls ValidateCanWriteToFolder on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        IEnumerable<string> ValidateCanWriteToFolder(string folderPath);

        /// <summary>
        /// Send a test email from the server
        /// </summary>
        /// <returns>True if successful</returns>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginSendTestEmail(string toAddress, string SMTPSenderEmail, string SMTPURL, string SMTPUser, string SMTPPassword, bool SMTPSecurityRequired, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling SendTestEmail on the server that corresponds to the result.
        ///</summary>
        bool EndSendTestEmail(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling SendTestEmail on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<bool> SendTestEmailAsync(string toAddress, string SMTPSenderEmail, string SMTPURL, string SMTPUser, string SMTPPassword, bool SMTPSecurityRequired);
#endif

        ///<summary>
        /// Calls SendTestEmail on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        bool SendTestEmail(string toAddress, string SMTPSenderEmail, string SMTPURL, string SMTPUser, string SMTPPassword, bool SMTPSecurityRequired);


    }
}
