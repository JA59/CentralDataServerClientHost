//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
/*
**
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2011 by Mettler Toledo AutoChem.  All rights reserved.
**
**ENDHEADER:
**/

using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using System.Threading.Tasks;

namespace AutoChem.Core.CentralDataServer.Config
{
    /// <summary>
    /// A client to the Configuration management service.
    /// </summary>
    public class ConfigurationManagementClientAdminAsync : ClientBase<IConfigurationManagementServiceAdminAsync>, IConfigurationManagementServiceAdminAsync
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="binding">binding (passed to base class)</param>
        /// <param name="remoteAddress">endpoint address (passed to base class)</param>
        public ConfigurationManagementClientAdminAsync(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        /// <summary>
        /// Gets the configuration settings for the central data server.
        /// </summary>
        public IAsyncResult BeginGetConfigurationSettings(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetConfigurationSettings(callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetConfigurationSettings on the server that corresponds to the result.
        ///</summary>
        public ConfigurationSettings EndGetConfigurationSettings(System.IAsyncResult result)
        {
            return base.Channel.EndGetConfigurationSettings(result);
        }


        ///<summary>
        /// Returns the result of calling GetConfigurationSettings on the server as an async Task.
        ///</summary>
        public Task<ConfigurationSettings> GetConfigurationSettingsAsync()
        {
            var taskSource = new TaskCompletionSource<ConfigurationSettings>();
            BeginGetConfigurationSettings(asyncResult =>
            {
                try
                {
                    var result = EndGetConfigurationSettings(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls GetConfigurationSettings on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public ConfigurationSettings GetConfigurationSettings()
        {
            IAsyncResult result = BeginGetConfigurationSettings(null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetConfigurationSettings(result);
        }

        /// <summary>
        /// Sets the configuration settings for the central data server.
        /// </summary>
        public IAsyncResult BeginSetConfigurationSettings(ConfigurationSettings settings, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSetConfigurationSettings(settings, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling SetConfigurationSettings on the server that corresponds to the result.
        ///</summary>
        public void EndSetConfigurationSettings(System.IAsyncResult result)
        {
            base.Channel.EndSetConfigurationSettings(result);
        }

        ///<summary>
        /// Returns the result of calling SetConfigurationSettings on the server as an async Task.
        ///</summary>
        public Task SetConfigurationSettingsAsync(ConfigurationSettings settings)
        {
            var taskSource = new TaskCompletionSource<object>();
            BeginSetConfigurationSettings(settings, asyncResult =>
            {
                try
                {
                    EndSetConfigurationSettings(asyncResult); var result = new object();
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls SetConfigurationSettings on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public void SetConfigurationSettings(ConfigurationSettings settings)
        {
            IAsyncResult result = BeginSetConfigurationSettings(settings, null, null);
            result.AsyncWaitHandle.WaitOne();

            EndSetConfigurationSettings(result);
        }

        /// <summary>
        /// Updates the word template with the specified template.
        /// </summary>
        public IAsyncResult BeginUploadWordTemplate(string fileName, byte[] templateData, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginUploadWordTemplate(fileName, templateData, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling UploadWordTemplate on the server that corresponds to the result.
        ///</summary>
        public void EndUploadWordTemplate(System.IAsyncResult result)
        {
            base.Channel.EndUploadWordTemplate(result);
        }

        ///<summary>
        /// Returns the result of calling UploadWordTemplate on the server as an async Task.
        ///</summary>
        public Task UploadWordTemplateAsync(string fileName, byte[] templateData)
        {
            var taskSource = new TaskCompletionSource<object>();
            BeginUploadWordTemplate(fileName, templateData, asyncResult =>
            {
                try
                {
                    EndUploadWordTemplate(asyncResult); var result = new object();
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls UploadWordTemplate on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public void UploadWordTemplate(string fileName, byte[] templateData)
        {
            IAsyncResult result = BeginUploadWordTemplate(fileName, templateData, null, null);
            result.AsyncWaitHandle.WaitOne();

            EndUploadWordTemplate(result);
        }

        /// <summary>
        /// Updates the report template used for creating reports for exeriments downloaded from Rxe instruments
        /// </summary>
        public IAsyncResult BeginUploadRxeInstrumentReportTemplate(string fileName, byte[] templateData, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginUploadRxeInstrumentReportTemplate(fileName, templateData, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling UploadRxeInstrumentReportTemplate on the server that corresponds to the result.
        ///</summary>
        public void EndUploadRxeInstrumentReportTemplate(System.IAsyncResult result)
        {
            base.Channel.EndUploadRxeInstrumentReportTemplate(result);
        }

        ///<summary>
        /// Returns the result of calling UploadRxeInstrumentReportTemplate on the server as an async Task.
        ///</summary>
        public Task UploadRxeInstrumentReportTemplateAsync(string fileName, byte[] templateData)
        {
            var taskSource = new TaskCompletionSource<object>();
            BeginUploadRxeInstrumentReportTemplate(fileName, templateData, asyncResult =>
            {
                try
                {
                    EndUploadRxeInstrumentReportTemplate(asyncResult); var result = new object();
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls UploadRxeInstrumentReportTemplate on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public void UploadRxeInstrumentReportTemplate(string fileName, byte[] templateData)
        {
            IAsyncResult result = BeginUploadRxeInstrumentReportTemplate(fileName, templateData, null, null);
            result.AsyncWaitHandle.WaitOne();

            EndUploadRxeInstrumentReportTemplate(result);
        }

        /// <summary>
        /// Updates the report template used as the default in iControl when iControl is configured to use the central data server.
        /// </summary>
        public IAsyncResult BeginUploadDefaultiControlReportTemplate(string fileName, byte[] templateData, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginUploadDefaultiControlReportTemplate(fileName, templateData, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling UploadDefaultiControlReportTemplate on the server that corresponds to the result.
        ///</summary>
        public void EndUploadDefaultiControlReportTemplate(System.IAsyncResult result)
        {
            base.Channel.EndUploadDefaultiControlReportTemplate(result);
        }

        ///<summary>
        /// Returns the result of calling UploadDefaultiControlReportTemplate on the server as an async Task.
        ///</summary>
        public Task UploadDefaultiControlReportTemplateAsync(string fileName, byte[] templateData)
        {
            var taskSource = new TaskCompletionSource<object>();
            BeginUploadDefaultiControlReportTemplate(fileName, templateData, asyncResult =>
            {
                try
                {
                    EndUploadDefaultiControlReportTemplate(asyncResult); var result = new object();
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls UploadDefaultiControlReportTemplate on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public void UploadDefaultiControlReportTemplate(string fileName, byte[] templateData)
        {
            IAsyncResult result = BeginUploadDefaultiControlReportTemplate(fileName, templateData, null, null);
            result.AsyncWaitHandle.WaitOne();

            EndUploadDefaultiControlReportTemplate(result);
        }

        /// <summary>
        /// Convert a local folder path to a UNC path
        /// </summary>
        public IAsyncResult BeginConvertLocalFolderPathToUNCPath(string localfolderPath, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginConvertLocalFolderPathToUNCPath(localfolderPath, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling ConvertLocalFolderPathToUNCPath on the server that corresponds to the result.
        ///</summary>
        public string EndConvertLocalFolderPathToUNCPath(System.IAsyncResult result)
        {
            return base.Channel.EndConvertLocalFolderPathToUNCPath(result);
        }

        ///<summary>
        /// Returns the result of calling ConvertLocalFolderPathToUNCPath on the server as an async Task.
        ///</summary>
        public Task<string> ConvertLocalFolderPathToUNCPathAsync(string localfolderPath)
        {
            var taskSource = new TaskCompletionSource<string>();
            BeginConvertLocalFolderPathToUNCPath(localfolderPath, asyncResult =>
            {
                try
                {
                    var result = EndConvertLocalFolderPathToUNCPath(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls ConvertLocalFolderPathToUNCPath on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public string ConvertLocalFolderPathToUNCPath(string localfolderPath)
        {
            IAsyncResult result = BeginConvertLocalFolderPathToUNCPath(localfolderPath, null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndConvertLocalFolderPathToUNCPath(result);
        }

        /// <summary>
        /// Validates that the server can access the specified folder and that it has permission to write to the folder.
        /// </summary>
        public IAsyncResult BeginValidateCanWriteToFolder(string folderPath, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginValidateCanWriteToFolder(folderPath, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling ValidateCanWriteToFolder on the server that corresponds to the result.
        ///</summary>
        public IEnumerable<string> EndValidateCanWriteToFolder(System.IAsyncResult result)
        {
            return base.Channel.EndValidateCanWriteToFolder(result);
        }

        ///<summary>
        /// Returns the result of calling ValidateCanWriteToFolder on the server as an async Task.
        ///</summary>
        public Task<IEnumerable<string>> ValidateCanWriteToFolderAsync(string folderPath)
        {
            var taskSource = new TaskCompletionSource<IEnumerable<string>>();
            BeginValidateCanWriteToFolder(folderPath, asyncResult =>
            {
                try
                {
                    var result = EndValidateCanWriteToFolder(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls ValidateCanWriteToFolder on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public IEnumerable<string> ValidateCanWriteToFolder(string folderPath)
        {
            IAsyncResult result = BeginValidateCanWriteToFolder(folderPath, null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndValidateCanWriteToFolder(result);
        }

        /// <summary>
        /// Send a test email from the server
        /// </summary>
        /// <returns></returns>
        public IAsyncResult BeginSendTestEmail(string toAddress, string SMTPSenderEmail, string SMTPURL, string SMTPUser, string SMTPPassword, bool SMTPSecurityRequired, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSendTestEmail(toAddress, SMTPSenderEmail, SMTPURL, SMTPUser, SMTPPassword, SMTPSecurityRequired, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling SendTestEmail on the server that corresponds to the result.
        ///</summary>
        public bool EndSendTestEmail(System.IAsyncResult result)
        {
            return base.Channel.EndSendTestEmail(result);
        }

        ///<summary>
        /// Returns the result of calling SendTestEmail on the server as an async Task.
        ///</summary>
        public Task<bool> SendTestEmailAsync(string toAddress, string SMTPSenderEmail, string SMTPURL, string SMTPUser, string SMTPPassword, bool SMTPSecurityRequired)
        {
            var taskSource = new TaskCompletionSource<bool>();
            BeginSendTestEmail(toAddress, SMTPSenderEmail, SMTPURL, SMTPUser, SMTPPassword, SMTPSecurityRequired, asyncResult =>
            {
                try
                {
                    var result = EndSendTestEmail(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls SendTestEmail on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public bool SendTestEmail(string toAddress, string SMTPSenderEmail, string SMTPURL, string SMTPUser, string SMTPPassword, bool SMTPSecurityRequired)
        {
            IAsyncResult result = BeginSendTestEmail(toAddress, SMTPSenderEmail, SMTPURL, SMTPUser, SMTPPassword, SMTPSecurityRequired, null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndSendTestEmail(result);
        }
    }
}
