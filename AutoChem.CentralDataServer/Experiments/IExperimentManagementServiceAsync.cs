//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
/*
**
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2011 by Mettler Toledo AutoChem.  All rights reserved.
**
**ENDHEADER:
**/

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Threading.Tasks;

namespace AutoChem.Core.CentralDataServer.Experiments
{
    /// <summary>
    /// Defines the operations available in the experiment management service.
    /// </summary>
    [ServiceContract(Name = "IExperimentManagementService", Namespace = ServicesHelper.ServiceNameSpace)]
    public interface IExperimentManagementServiceAsync
    {
#if !SILVERLIGHT
        /// <summary>
        /// Upload an experiment file.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginUploadFile(UploadFileInfo request, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling UploadFile on the server that corresponds to the result.
        ///</summary>
        UploadFileResult EndUploadFile(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling UploadFile on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<UploadFileResult> UploadFileAsync(UploadFileInfo request);
#endif

        ///<summary>
        /// Calls UploadFile on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        UploadFileResult UploadFile(UploadFileInfo request);

        /// <summary>
        /// Initiates the uploading of a file.  Use the UploadID returned to upload the data.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginInitiateFileUpload(UploadFileRequest request, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling InitiateFileUpload on the server that corresponds to the result.
        ///</summary>
        UploadFileRequestResult EndInitiateFileUpload(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling InitiateFileUpload on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<UploadFileRequestResult> InitiateFileUploadAsync(UploadFileRequest request);
#endif

        ///<summary>
        /// Calls InitiateFileUpload on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        UploadFileRequestResult InitiateFileUpload(UploadFileRequest request);

        /// <summary>
        /// Uploads data for a file with the ID returned from InitiateFileUpload.
        /// This would generally be called multiple times to upload all of the data
        /// for a file.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginUploadFileData(Guid uploadID, byte[] fileData, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling UploadFileData on the server that corresponds to the result.
        ///</summary>
        void EndUploadFileData(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling UploadFileData on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task UploadFileDataAsync(Guid uploadID, byte[] fileData);
#endif

        ///<summary>
        /// Calls UploadFileData on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        void UploadFileData(Guid uploadID, byte[] fileData);

        /// <summary>
        /// Ends a file upload that was initiated by InitiateFileUpload and where the data was upload using UploadFileData.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginEndFileUpload(Guid uploadID, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling EndFileUpload on the server that corresponds to the result.
        ///</summary>
        EndFileUploadResult EndEndFileUpload(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling EndFileUpload on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<EndFileUploadResult> EndFileUploadAsync(Guid uploadID);
#endif

        ///<summary>
        /// Calls EndFileUpload on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        EndFileUploadResult EndFileUpload(Guid uploadID);
#endif
    }
}
