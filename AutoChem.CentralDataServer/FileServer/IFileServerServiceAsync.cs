//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
/*
**
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2015 by Mettler Toledo AutoChem.  All rights reserved.
**
**ENDHEADER:
**/
using System;
using System.ServiceModel;
using System.Text;
using System.Threading.Tasks;

namespace AutoChem.Core.CentralDataServer.FileServer
{
    /// <summary>
    /// Defines the operations available in the experiment management service.
    /// </summary>
    [ServiceContract(Name = "IFileServerService", Namespace = ServicesHelper.ServiceNameSpace)]

    public interface IFileServerServiceAsync
    {
#if !SILVERLIGHT

        /// <summary>
        /// Get the file name associated with a keyword.
        /// Returns String.Empty if the keyword is not valid.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetFileName(DownloadFileRequest request, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetFileName on the server that corresponds to the result.
        ///</summary>
        string EndGetFileName(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetFileName on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<string> GetFileNameAsync(DownloadFileRequest request);
#endif

        ///<summary>
        /// Calls GetFileName on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        string GetFileName(DownloadFileRequest request);

        /// <summary>
        /// Get a hash code based on the contents of the file.  A client can use this to compare the client's version of
        /// a file with the server's version of a file, and therefore determine if it needs to download the file.
        /// Returns null if the file does not exist.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetHashValue(DownloadFileRequest request, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetHashValue on the server that corresponds to the result.
        ///</summary>
        byte[] EndGetHashValue(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetHashValue on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<byte[]> GetHashValueAsync(DownloadFileRequest request);
#endif

        ///<summary>
        /// Calls GetHashValue on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        byte[] GetHashValue(DownloadFileRequest request);        
        
        /// <summary>
        /// Get the size of the file (in bytes.)  A client can use this to determine how many individual data downloads
        /// are required to get the entire file.  Returns -1 if the file does not exist.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetSize(DownloadFileRequest request, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetSize on the server that corresponds to the result.
        ///</summary>
        long EndGetSize(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetSize on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<long> GetSizeAsync(DownloadFileRequest request);
#endif

        ///<summary>
        /// Calls GetSize on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        long GetSize(DownloadFileRequest request);

        /// <summary>
        /// Download a portion of the file.
        /// Throws an exception if the file does not exist.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginDownloadFileData(DownloadFileRequest request, long offset, int size, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling DownloadFileData on the server that corresponds to the result.
        ///</summary>
        DownloadFileResult EndDownloadFileData(System.IAsyncResult result);

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling DownloadFileData on the server as an async Task.
        ///</summary>
        [OperationContract(AsyncPattern=true)]
        Task<DownloadFileResult> DownloadFileDataAsync(DownloadFileRequest request, long offset, int size);
#endif

        ///<summary>
        /// Calls DownloadFileData on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        DownloadFileResult DownloadFileData(DownloadFileRequest request, long offset, int size);
#endif

    }
}
