//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
/*
**
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2015 by Mettler Toledo AutoChem.  All rights reserved.
**
**ENDHEADER:
**/
using System;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using System.Threading.Tasks;

namespace AutoChem.Core.CentralDataServer.FileServer
{
    /// <summary>
    /// Client wrapper for calling methods within iC Data Center File Server service
    /// </summary>
    public class FileServerClientAsync : ClientBase<IFileServerServiceAsync>, IFileServerServiceAsync
    {
        /// <summary>
        /// Constructor
        /// </summary>
        public FileServerClientAsync(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }
#if !SILVERLIGHT        
        /// <summary>
        /// 
        /// </summary>
        public IAsyncResult BeginGetFileName(DownloadFileRequest request, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetFileName(request, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetFileName on the server that corresponds to the result.
        ///</summary>
        public string EndGetFileName(System.IAsyncResult result)
        {
            return base.Channel.EndGetFileName(result);
        }

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetFileName on the server as an async Task.
        ///</summary>
        public Task<string> GetFileNameAsync(DownloadFileRequest request)
        {
            return base.Channel.GetFileNameAsync(request);
        }
#else
        ///<summary>
        /// Returns the result of calling GetFileName on the server as an async Task.
        ///</summary>
        public Task<string> GetFileNameAsync(DownloadFileRequest request)
        {
            var taskSource = new TaskCompletionSource<string>();
            BeginGetFileName(request, asyncResult =>
            {
                try
                {
                    var result = EndGetFileName(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }
#endif

        ///<summary>
        /// Calls GetFileName on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public string GetFileName(DownloadFileRequest request)
        {
            IAsyncResult result = BeginGetFileName(request, null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetFileName(result);
        }        
        
        /// <summary>
        /// 
        /// </summary>
        public IAsyncResult BeginGetHashValue(DownloadFileRequest request, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetHashValue(request, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetHashValue on the server that corresponds to the result.
        ///</summary>
        public byte[] EndGetHashValue(System.IAsyncResult result)
        {
            return base.Channel.EndGetHashValue(result);
        }

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetHashValue on the server as an async Task.
        ///</summary>
        public Task<byte[]> GetHashValueAsync(DownloadFileRequest request)
        {
            return base.Channel.GetHashValueAsync(request);
        }
#else
        ///<summary>
        /// Returns the result of calling GetHashValue on the server as an async Task.
        ///</summary>
        public Task<byte[]> GetHashValueAsync(DownloadFileRequest request)
        {
            var taskSource = new TaskCompletionSource<byte[]>();
            BeginGetHashValue(request, asyncResult =>
            {
                try
                {
                    var result = EndGetHashValue(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }
#endif

        ///<summary>
        /// Calls GetHashValue on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public byte[] GetHashValue(DownloadFileRequest request)
        {
            IAsyncResult result = BeginGetHashValue(request, null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetHashValue(result);
        }

        /// <summary>
        /// 
        /// </summary>
        public IAsyncResult BeginGetSize(DownloadFileRequest request, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetSize(request, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetSize on the server that corresponds to the result.
        ///</summary>
        public long EndGetSize(System.IAsyncResult result)
        {
            return base.Channel.EndGetSize(result);
        }

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetSize on the server as an async Task.
        ///</summary>
        public Task<long> GetSizeAsync(DownloadFileRequest request)
        {
            return base.Channel.GetSizeAsync(request);
        }
#else
        ///<summary>
        /// Returns the result of calling GetSize on the server as an async Task.
        ///</summary>
        public Task<long> GetSizeAsync(DownloadFileRequest request)
        {
            var taskSource = new TaskCompletionSource<long>();
            BeginGetSize(request, asyncResult =>
            {
                try
                {
                    var result = EndGetSize(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }
#endif

        ///<summary>
        /// Calls GetSize on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public long GetSize(DownloadFileRequest request)
        {
            IAsyncResult result = BeginGetSize(request, null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetSize(result);
        }

        /// <summary>
        /// 
        /// </summary>
        public IAsyncResult BeginDownloadFileData(DownloadFileRequest request, long offset, int size, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginDownloadFileData(request, offset, size, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling DownloadFileData on the server that corresponds to the result.
        ///</summary>
        public DownloadFileResult EndDownloadFileData(System.IAsyncResult result)
        {
            return base.Channel.EndDownloadFileData(result);
        }

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling DownloadFileData on the server as an async Task.
        ///</summary>
        public Task<DownloadFileResult> DownloadFileDataAsync(DownloadFileRequest request, long offset, int size)
        {
            return base.Channel.DownloadFileDataAsync(request, offset, size);
        }
#else
        ///<summary>
        /// Returns the result of calling DownloadFileData on the server as an async Task.
        ///</summary>
        public Task<DownloadFileResult> DownloadFileDataAsync(DownloadFileRequest request, long offset, int size)
        {
            var taskSource = new TaskCompletionSource<DownloadFileResult>();
            BeginDownloadFileData(request, offset, size, asyncResult =>
            {
                try
                {
                    var result = EndDownloadFileData(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }
#endif

        ///<summary>
        /// Calls DownloadFileData on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public DownloadFileResult DownloadFileData(DownloadFileRequest request, long offset, int size)
        {
            IAsyncResult result = BeginDownloadFileData(request, offset, size, null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndDownloadFileData(result);
        }
#endif
    }
}
