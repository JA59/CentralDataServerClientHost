//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.Text;
using System.Threading.Tasks;

namespace AutoChem.Core.CentralDataServer.General
{
    /// <summary>
    /// Defines the operations available to get server settings.
    /// </summary>
    [ServiceContract(Name = "IGeneralAuthorizationService", Namespace = ServicesHelper.ServiceNameSpace)]
    public interface IGeneralAuthorizationServiceAsync
    {
        /// <summary>
        /// Call that a client can make to determine if the server is configured for anonymous access
        /// </summary>
        /// <returns>True if the server is configured for anonymous access</returns>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginIsAnonymousAccessAllowed(System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling IsAnonymousAccessAllowed on the server that corresponds to the result.
        ///</summary>
        bool EndIsAnonymousAccessAllowed(System.IAsyncResult result);


        ///<summary>
        /// Calls IsAnonymousAccessAllowed on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        bool IsAnonymousAccessAllowed();

        /// <summary>
        /// Call that a client can make to determine if it is executing on the same PC as the server
        /// </summary>
        /// <returns>True if client and server are executing on the same PC</returns>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginIsClientComputerSameAsServer(System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling IsClientComputerSameAsServer on the server that corresponds to the result.
        ///</summary>
        bool EndIsClientComputerSameAsServer(System.IAsyncResult result);

        ///<summary>
        /// Calls IsClientComputerSameAsServer on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        bool IsClientComputerSameAsServer();
    }
}
