//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
/*
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2011 by Mettler Toledo AutoChemAutoChem.  All rights reserved.
**
**ENDHEADER:
*/
using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Threading.Tasks;
using AutoChem.Core.CentralDataServer.Logging;
using AutoChem.Core.CentralDataServer.Statistics;
using AutoChem.Core.CentralDataServer.Server;

namespace AutoChem.Core.CentralDataServer.General
{
    /// <summary>
    /// Defines the operations available in the general purpose management service.
    /// </summary>
    [ServiceContract(Name = "IGeneralManagementService", Namespace = ServicesHelper.ServiceNameSpace)]
    public interface IGeneralManagementServiceAsync
    {
        /// <summary>
        /// Send an error to the server to be logged with server side messages.
        /// Message is logged as an error message.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginTraceError(string message, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling TraceError on the server that corresponds to the result.
        ///</summary>
        void EndTraceError(System.IAsyncResult result);

        ///<summary>
        /// Calls TraceError on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        void TraceError(string message);

        /// <summary>
        /// Send an array of messages to the server to be logged with server side messages.
        /// Messages are logged as a block of information messages.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginTraceClientLogMessages(string[] messages, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling TraceClientLogMessages on the server that corresponds to the result.
        ///</summary>
        void EndTraceClientLogMessages(System.IAsyncResult result);

        ///<summary>
        /// Calls TraceClientLogMessages on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        void TraceClientLogMessages(string[] messages);
        
        /// <summary>
        /// Get the version string
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetServerVersion(System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetServerVersion on the server that corresponds to the result.
        ///</summary>
        string EndGetServerVersion(System.IAsyncResult result);

        ///<summary>
        /// Calls GetServerVersion on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        string GetServerVersion();

        /// <summary>
        /// Get overall system state
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetSystemStateInfo(System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetSystemStateInfo on the server that corresponds to the result.
        ///</summary>
        SystemStateInfo EndGetSystemStateInfo(System.IAsyncResult result);

        ///<summary>
        /// Calls GetSystemStateInfo on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        SystemStateInfo GetSystemStateInfo();

        /// <summary>
        /// Registers an observer to have a collection of events be retrievable for the observer.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginAddServerObserver(Guid observerID, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling AddServerObserver on the server that corresponds to the result.
        ///</summary>
        void EndAddServerObserver(System.IAsyncResult result);

        ///<summary>
        /// Calls AddServerObserver on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        void AddServerObserver(Guid observerID);

        /// <summary>
        /// Gets the events for the observer.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetEvents(Guid observerID, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetEvents on the server that corresponds to the result.
        ///</summary>
        ServerEvents EndGetEvents(System.IAsyncResult result);

        ///<summary>
        /// Calls GetEvents on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        ServerEvents GetEvents(Guid observerID);
    }
}
