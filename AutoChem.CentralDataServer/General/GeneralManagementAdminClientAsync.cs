//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
/*
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2011 by Mettler Toledo AutoChemAutoChem.  All rights reserved.
**
**ENDHEADER:
*/

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading.Tasks;
using AutoChem.Core.CentralDataServer.Logging;
using AutoChem.Core.CentralDataServer.Server;
using AutoChem.Core.CentralDataServer.Statistics;
using AutoChem.Core.ServiceModel;

namespace AutoChem.Core.CentralDataServer.General
{
    /// <summary>
    /// A client to the General management service.
    /// </summary>
    public class GeneralManagementAdminClientAsync : ClientBase<IGeneralManagementServiceAdminAsync>, IGeneralManagementServiceAdminAsync
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="binding">binding (passed to base class)</param>
        /// <param name="remoteAddress">endpoint address (passed to base class)</param>
        public GeneralManagementAdminClientAsync(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        /// <summary>
        /// Get recent user log entries
        /// </summary>
        public IAsyncResult BeginGetUserLogEntriesRecentDays(int maxDays, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetUserLogEntriesRecentDays(maxDays, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetUserLogEntriesRecentDays on the server that corresponds to the result.
        ///</summary>
        public IEnumerable<UserLogEntry> EndGetUserLogEntriesRecentDays(System.IAsyncResult result)
        {
            return base.Channel.EndGetUserLogEntriesRecentDays(result);
        }

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetUserLogEntriesRecentDays on the server as an async Task.
        ///</summary>
        public Task<IEnumerable<UserLogEntry>> GetUserLogEntriesRecentDaysAsync(int maxDays)
        {
            return base.Channel.GetUserLogEntriesRecentDaysAsync(maxDays);
        }
#else
        ///<summary>
        /// Returns the result of calling GetUserLogEntriesRecentDays on the server as an async Task.
        ///</summary>
        public Task<IEnumerable<UserLogEntry>> GetUserLogEntriesRecentDaysAsync(int maxDays)
        {
            var taskSource = new TaskCompletionSource<IEnumerable<UserLogEntry>>();
            BeginGetUserLogEntriesRecentDays(maxDays, asyncResult =>
            {
                try
                {
                    var result = EndGetUserLogEntriesRecentDays(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }
#endif

        ///<summary>
        /// Calls GetUserLogEntriesRecentDays on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public IEnumerable<UserLogEntry> GetUserLogEntriesRecentDays(int maxDays)
        {
            IAsyncResult result = BeginGetUserLogEntriesRecentDays(maxDays, null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetUserLogEntriesRecentDays(result);
        }

        /// <summary>
        /// Get recent user log entries (currently past 6 months)
        /// </summary>
        public IAsyncResult BeginGetUserLogEntries(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetUserLogEntries(callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetUserLogEntries on the server that corresponds to the result.
        ///</summary>
        public IEnumerable<UserLogEntry> EndGetUserLogEntries(System.IAsyncResult result)
        {
            return base.Channel.EndGetUserLogEntries(result);
        }

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetUserLogEntries on the server as an async Task.
        ///</summary>
        public Task<IEnumerable<UserLogEntry>> GetUserLogEntriesAsync()
        {
            return base.Channel.GetUserLogEntriesAsync();
        }
#else
        ///<summary>
        /// Returns the result of calling GetUserLogEntries on the server as an async Task.
        ///</summary>
        public Task<IEnumerable<UserLogEntry>> GetUserLogEntriesAsync()
        {
            var taskSource = new TaskCompletionSource<IEnumerable<UserLogEntry>>();
            BeginGetUserLogEntries(asyncResult =>
            {
                try
                {
                    var result = EndGetUserLogEntries(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }
#endif

        ///<summary>
        /// Calls GetUserLogEntries on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public IEnumerable<UserLogEntry> GetUserLogEntries()
        {
            IAsyncResult result = BeginGetUserLogEntries(null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetUserLogEntries(result);
        }

        /// <summary>
        /// Marks the provided log entry as resolved.
        /// </summary>
        public IAsyncResult BeginMarkResolved(UserLogEntry entry, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginMarkResolved(entry, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling MarkResolved on the server that corresponds to the result.
        ///</summary>
        public void EndMarkResolved(System.IAsyncResult result)
        {
            base.Channel.EndMarkResolved(result);
        }

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling MarkResolved on the server as an async Task.
        ///</summary>
        public Task MarkResolvedAsync(UserLogEntry entry)
        {
            return base.Channel.MarkResolvedAsync(entry);
        }
#else
        ///<summary>
        /// Returns the result of calling MarkResolved on the server as an async Task.
        ///</summary>
        public Task MarkResolvedAsync(UserLogEntry entry)
        {
            var taskSource = new TaskCompletionSource<object>();
            BeginMarkResolved(entry, asyncResult =>
            {
                try
                {
                    EndMarkResolved(asyncResult); var result = new object();
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }
#endif

        ///<summary>
        /// Calls MarkResolved on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public void MarkResolved(UserLogEntry entry)
        {
            IAsyncResult result = BeginMarkResolved(entry, null, null);
            result.AsyncWaitHandle.WaitOne();

            EndMarkResolved(result);
        }

        /// <summary>
        /// Gets a code for downloading log files.
        /// </summary>
        public IAsyncResult BeginGetLogFileCode(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetLogFileCode(callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetLogFileCode on the server that corresponds to the result.
        ///</summary>
        public string EndGetLogFileCode(System.IAsyncResult result)
        {
            return base.Channel.EndGetLogFileCode(result);
        }

#if !SILVERLIGHT
        ///<summary>
        /// Returns the result of calling GetLogFileCode on the server as an async Task.
        ///</summary>
        public Task<string> GetLogFileCodeAsync()
        {
            return base.Channel.GetLogFileCodeAsync();
        }
#else
        ///<summary>
        /// Returns the result of calling GetLogFileCode on the server as an async Task.
        ///</summary>
        public Task<string> GetLogFileCodeAsync()
        {
            var taskSource = new TaskCompletionSource<string>();
            BeginGetLogFileCode(asyncResult =>
            {
                try
                {
                    var result = EndGetLogFileCode(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }
#endif

        ///<summary>
        /// Calls GetLogFileCode on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public string GetLogFileCode()
        {
            IAsyncResult result = BeginGetLogFileCode(null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetLogFileCode(result);
        }
    }
}
