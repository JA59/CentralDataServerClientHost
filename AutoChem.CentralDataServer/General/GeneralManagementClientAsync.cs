//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
/*
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2011 by Mettler Toledo AutoChemAutoChem.  All rights reserved.
**
**ENDHEADER:
*/

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading.Tasks;
using AutoChem.Core.CentralDataServer.Logging;
using AutoChem.Core.CentralDataServer.Server;
using AutoChem.Core.CentralDataServer.Statistics;
using AutoChem.Core.ServiceModel;

namespace AutoChem.Core.CentralDataServer.General
{
    /// <summary>
    /// A client to the General management service.
    /// </summary>
    public class GeneralManagementClientAsync : ClientBase<IGeneralManagementServiceAsync>, IGeneralManagementServiceAsync
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="binding">binding (passed to base class)</param>
        /// <param name="remoteAddress">endpoint address (passed to base class)</param>
        public GeneralManagementClientAsync(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }   
        
        /// <summary>
        /// Send an error to the server to be logged with server side messages
        /// </summary>
        public IAsyncResult BeginTraceError(string message, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginTraceError(message, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling TraceError on the server that corresponds to the result.
        ///</summary>
        public void EndTraceError(System.IAsyncResult result)
        {
            base.Channel.EndTraceError(result);
        }

        ///<summary>
        /// Returns the result of calling TraceError on the server as an async Task.
        ///</summary>
        public Task TraceErrorAsync(string message)
        {
            var taskSource = new TaskCompletionSource<object>();
            BeginTraceError(message, asyncResult =>
            {
                try
                {
                    EndTraceError(asyncResult); var result = new object();
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        ///Asynchronously calls TraceError on the server and does not wait for a response.
        ///</summary>
        public void TraceError(string message)
        {
            BeginTraceError(message, HandleEndTraceError, null);
        }

        private void HandleEndTraceError(IAsyncResult result)
        {
            try
            {
                EndTraceError(result);
            }
            catch (Exception exception)
            {
                Debug.WriteLine("There was an error ending TraceError. " +exception);
            }
        }

        /// <summary>
        /// Formats the error message and sends it to the server.  Note the send is asynchronous in the Async version.
        /// </summary>
        public void TraceError(string format, params object[] args)
        {
            string message = string.Format(format, args);
            TraceError(message);
        }

        /// <summary>
        /// Send an array of messages to the server to be logged with server side messages
        /// </summary>
        public IAsyncResult BeginTraceClientLogMessages(string[] messages, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginTraceClientLogMessages(messages, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling TraceClientLogMessages on the server that corresponds to the result.
        ///</summary>
        public void EndTraceClientLogMessages(System.IAsyncResult result)
        {
            base.Channel.EndTraceClientLogMessages(result);
        }

        ///<summary>
        /// Returns the result of calling TraceClientLogMessages on the server as an async Task.
        ///</summary>
        public Task TraceClientLogMessagesAsync(string[] messages)
        {
            var taskSource = new TaskCompletionSource<object>();
            BeginTraceClientLogMessages(messages, asyncResult =>
            {
                try
                {
                    EndTraceClientLogMessages(asyncResult); var result = new object();
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls TraceClientLogMessages on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public void TraceClientLogMessages(string[] messages)
        {
            IAsyncResult result = BeginTraceClientLogMessages(messages, null, null);
            result.AsyncWaitHandle.WaitOne();

            EndTraceClientLogMessages(result);
        }

        /// <summary>
        /// Get the server version
        /// </summary>
        /// <returns></returns>
        public IAsyncResult BeginGetServerVersion(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetServerVersion(callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetServerVersion on the server that corresponds to the result.
        ///</summary>
        public string EndGetServerVersion(System.IAsyncResult result)
        {
            return base.Channel.EndGetServerVersion(result);
        }

        ///<summary>
        /// Returns the result of calling GetServerVersion on the server as an async Task.
        ///</summary>
        public Task<string> GetServerVersionAsync()
        {
            var taskSource = new TaskCompletionSource<string>();
            BeginGetServerVersion(asyncResult =>
            {
                try
                {
                    var result = EndGetServerVersion(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls GetServerVersion on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public string GetServerVersion()
        {
            IAsyncResult result = BeginGetServerVersion(null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetServerVersion(result);
        }

        /// <summary>
        /// Get overall system state
        /// </summary>
        public IAsyncResult BeginGetSystemStateInfo(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetSystemStateInfo(callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetSystemStateInfo on the server that corresponds to the result.
        ///</summary>
        public SystemStateInfo EndGetSystemStateInfo(System.IAsyncResult result)
        {
            return base.Channel.EndGetSystemStateInfo(result);
        }


        ///<summary>
        /// Returns the result of calling GetSystemStateInfo on the server as an async Task.
        ///</summary>
        public Task<SystemStateInfo> GetSystemStateInfoAsync()
        {
            var taskSource = new TaskCompletionSource<SystemStateInfo>();
            BeginGetSystemStateInfo(asyncResult =>
            {
                try
                {
                    var result = EndGetSystemStateInfo(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls GetSystemStateInfo on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public SystemStateInfo GetSystemStateInfo()
        {
            IAsyncResult result = BeginGetSystemStateInfo(null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetSystemStateInfo(result);
        }

        /// <summary>
        /// Registers an observer to have a collection of events be retrievable for the observer.
        /// </summary>
        public IAsyncResult BeginAddServerObserver(Guid observerID, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginAddServerObserver(observerID, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling AddServerObserver on the server that corresponds to the result.
        ///</summary>
        public void EndAddServerObserver(System.IAsyncResult result)
        {
            base.Channel.EndAddServerObserver(result);
        }

        ///<summary>
        /// Returns the result of calling AddServerObserver on the server as an async Task.
        ///</summary>
        public Task AddServerObserverAsync(Guid observerID)
        {
            var taskSource = new TaskCompletionSource<object>();
            BeginAddServerObserver(observerID, asyncResult =>
            {
                try
                {
                    EndAddServerObserver(asyncResult); var result = new object();
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls AddServerObserver on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public void AddServerObserver(Guid observerID)
        {
            IAsyncResult result = BeginAddServerObserver(observerID, null, null);
            result.AsyncWaitHandle.WaitOne();

            EndAddServerObserver(result);
        }

        /// <summary>
        /// Gets the events for the observer.
        /// </summary>
        public IAsyncResult BeginGetEvents(Guid observerID, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetEvents(observerID, callback, asyncState);
        }

        ///<summary>
        /// Returns the result of calling GetEvents on the server that corresponds to the result.
        ///</summary>
        public ServerEvents EndGetEvents(System.IAsyncResult result)
        {
            return base.Channel.EndGetEvents(result);
        }

        ///<summary>
        /// Returns the result of calling GetEvents on the server as an async Task.
        ///</summary>
        public Task<ServerEvents> GetEventsAsync(Guid observerID)
        {
            var taskSource = new TaskCompletionSource<ServerEvents>();
            BeginGetEvents(observerID, asyncResult =>
            {
                try
                {
                    var result = EndGetEvents(asyncResult);
                    taskSource.SetResult(result);
                }
                catch (Exception exception)
                {
                    taskSource.SetException(exception);
                }
            }, null);
            return taskSource.Task;
        }

        ///<summary>
        /// Calls GetEvents on the server and waits for a response (synchronous).
        /// This should not be called on a UI thread
        ///</summary>
        public ServerEvents GetEvents(Guid observerID)
        {
            IAsyncResult result = BeginGetEvents(observerID, null, null);
            result.AsyncWaitHandle.WaitOne();

            return EndGetEvents(result);
        }
    }
}
