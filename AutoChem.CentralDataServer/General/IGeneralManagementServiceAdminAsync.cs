//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// This code was auto-generated by ContractConverterTools.AsyncContractConverterTool, version 1.9.0.0
// 
/*
**COPYRIGHT:
**    This software program is furnished to the user under license
**  by METTLER TOLEDO AutoChem, and use thereof is subject to applicable 
**  U.S. and international law. This software program may not be 
**  reproduced, transmitted, or disclosed to third parties, in 
**  whole or in part, in any form or by any manner, electronic or
**  mechanical, without the express written consent of METTLER TOLEDO 
**  AutoChem, except to the extent provided for by applicable license.
**
**    Copyright Â© 2011 by Mettler Toledo AutoChemAutoChem.  All rights reserved.
**
**ENDHEADER:
*/
using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Threading.Tasks;
using AutoChem.Core.CentralDataServer.Logging;
using AutoChem.Core.CentralDataServer.Statistics;
using AutoChem.Core.CentralDataServer.Server;

namespace AutoChem.Core.CentralDataServer.General
{
    /// <summary>
    /// Defines the operations available in the general purpose management service.
    /// </summary>
    [ServiceContract(Name = "IGeneralManagementServiceAdmin", Namespace = ServicesHelper.ServiceNameSpace)]
    public interface IGeneralManagementServiceAdminAsync
    {
        /// <summary>
        /// Upload Recent UserLogEntries.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetUserLogEntriesRecentDays(int maxDays, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetUserLogEntriesRecentDays on the server that corresponds to the result.
        ///</summary>
        IEnumerable<UserLogEntry> EndGetUserLogEntriesRecentDays(System.IAsyncResult result);

        ///<summary>
        /// Calls GetUserLogEntriesRecentDays on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        IEnumerable<UserLogEntry> GetUserLogEntriesRecentDays(int maxDays);

        /// <summary>
        /// Get Recent UserLogEntries (currently past 6 months)
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetUserLogEntries(System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetUserLogEntries on the server that corresponds to the result.
        ///</summary>
        IEnumerable<UserLogEntry> EndGetUserLogEntries(System.IAsyncResult result);

        ///<summary>
        /// Calls GetUserLogEntries on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        IEnumerable<UserLogEntry> GetUserLogEntries();

        /// <summary>
        /// Marks the provided entry as resolved.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginMarkResolved(UserLogEntry entry, System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling MarkResolved on the server that corresponds to the result.
        ///</summary>
        void EndMarkResolved(System.IAsyncResult result);

        ///<summary>
        /// Calls MarkResolved on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        void MarkResolved(UserLogEntry entry);

        /// <summary>
        /// Gets a code for downloading log files.
        /// </summary>
        [OperationContract(AsyncPattern=true)]
        IAsyncResult BeginGetLogFileCode(System.AsyncCallback callback, object asyncState);

        ///<summary>
        /// Returns the result of calling GetLogFileCode on the server that corresponds to the result.
        ///</summary>
        string EndGetLogFileCode(System.IAsyncResult result);

        ///<summary>
        /// Calls GetLogFileCode on the server and may or may not wait for a response see client.
        /// If this is synchronous it should not be called on the UI thread.
        ///</summary>
        string GetLogFileCode();
    }
}
